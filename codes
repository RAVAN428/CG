1. DDA for a thin line.

Program:

#include<stdio.h>
#include<stdlib.h>
#include<graphics.h>
int main(void)
{
int gd=DETECT,gm;
int i,x,y,x1,y1,x2,y2,dx,dy,length,xincr,yincr;
printf("Enter the Starting co-ordinates of line");
scanf("%d%d",&x1,&y1);
printf("Enter the Ending co-ordinates of line");
scanf("%d%d",&x2,&y2);
initgraph(&gd,&gm," ");
dx=abs(x2-x1);
dy=abs(y2-y1); 
length = dx>dy?dx:dy;
xincr=dx/length;
yincr=dy/length;
putpixel(x1,y1,15);
x=x1;
y=y1;
for(i=1;i<=length;i++)
{
x=x+xincr;
y=y+yincr;
putpixel(x,y,15);
}
getch();
closegraph();
return 0;
}

2. DDA for a dotted line.

Program:

#include<stdio.h>
#include<stdlib.h>
#include<graphics.h>
int main(void)
{
int gd=DETECT,gm;
int i,x,y,x1,y1,x2,y2,dx,dy,length,xincr,yincr;
printf("Enter the Starting co-ordinates of line");
scanf("%d%d",&x1,&y1);
printf("Enter the Ending co-ordinates of line");
scanf("%d%d",&x2,&y2);
initgraph(&gd,&gm," ");
dx=abs(x2-x1);
dy=abs(y2-y1);
length = dx>dy?dx:dy;
xincr=dx/length;
yincr=dy/length;
putpixel(x1,y1,15);
x=x1;
y=y1;
for(i=1;i<=length;i++)
{
x=x+xincr;
y=y+yincr;
if(i%5==0)
{
continue;
}
else {
putpixel(x,y,15);
}
}
getch();
delay(1000);
closegraph();
return 0;
}

3. DDA for a dashed line.

Program:

#include<stdio.h>
#include<graphics.h>
#include<stdlib.h>
#include<stdio.h>
int main(void)
{
int gdriver = DETECT, gmode;
int i,x,y,x1,y1,x2,y2,dx,dy,length,xincr,yincr;
printf("Enter the starting coordinates of line");
scanf("%d%d",&x1,&y1);
printf("Enter the ending coordinates of line");
scanf("%d%d",&x2,&y2);
initgraph(&gdriver,&gmode, "");
dx=abs(x2-x1);
dy=abs(y2-y1);
if(dx>dy)
length=dx;
else
length=dy;
xincr=dx/length;
yincr=dy/length;
putpixel(x1,y1,15);
x=x1;
y=y1;
for(i=1;i<=length;i++)
{
x=x+xincr;
y=y+yincr;
putpixel(x,y,15);
}
getch();
closegraph();
return 0;
}

4. Bresenham's line drawing algorithm.

Program: (For Thin LINE).

#include<stdio.h>
#include<graphics.h>
#include<stdlib.h>
#include<stdio.h> 
int main(void)
{
int gdriver = DETECT, gmode;
int i,x,y,x1,y1,x2,y2,dx,dy, length,xincr,yincr;
printf("Enter the starting coordinates of line "); 
scanf("%d %d",&x1,&y1); 
printf("Enter the ending coordinates of line "); scanf("%d %d",&x2, &y2);
initgraph(&gdriver,&gmode, "");
dx-abs(x2-x1);
dy=abs(y2-y1); 
if(dx>dy)
length=dx;
else
length=dy;
xincr=dx/length; 
yincr=dy/length; 
putpixel(x1,y1,15);
x=x1;
y=y1;
for(i=1;i<=length;i++)
{
x=x+xincr;
y=y+yincr; 
putpixel(x,y,15);
}
getch();
closegraph();
return 0;
}

(Extra 4. Bresenham's line drawing algorithm, Dotted Line)

Program:

#include<stdio.h>
#include<stdlib.h>
#include<graphics.h>
int main(void)
{
int gd=DETECT,gm;
int i,x,y,x1,x2,y1,y2,dy,dx,length,P0;
printf("enter the Starting Coordinates of line");
scanf("%d%d",&x1,&y1);
printf("enter the Ending Coordinates of line");
scanf("%d%d",&x2,&y2);
initgraph(&gd,&gm," ");
dx=abs(x2-x1);
dy=abs(y2-y1);
lenght =(dx>dy)?dx:dy;
putpixel(x1,y1,2);
x=x1;
y=y1;
P0=2*dy-dx;
for(i=1;i<=length;i++)
{
if(P0<0){
x=x+1; y=y+0; 
P0=P0+2*dy
if(i%2==0){
continue;
}
else{
putpixel(x,y,2);
}
}
else
{
P0=P0+2*dy-dx*2
x=x+1; y=y+1; 
if(i%2==0){
continue;
}
else{
putpixel(x,y,2);
}
}
}
getch();
closegraph();
return 0;
}


(Extra 4. Bresenham's line drawing algorithm, Dashed Line)

Program:

#include<stdio.h>
#include<stdlib.h>
#include<graphics.h>
int main(void)
{
int gd=DETECT,gm;
int i,x,y,x1,x2,y1,y2,dy,dx,length,P0;
printf("enter the Starting Coordinates of line");
scanf("%d%d",&x1,&y1);
printf("enter the Ending Coordinates of line");
scanf("%d%d",&x2,&y2);
initgraph(&gd,&gm," ");
dx=abs(x2-x1);
dy=abs(y2-y1);
lenght =(dx>dy)?dx:dy;
putpixel(x1,y1,2);
x=x1;
y=y1;
P0=2*dy-dx;
for(i=1;i<=length;i++)
{
if(P0<0){
x=x+1; y=y+0; 
P0=P0+2*dy
if(i%2==0){
continue;
}
else{
putpixel(x,y,2);
}
}
else
{
P0=P0+2*dy-dx*2
x=x+1; y=y+1; 
if(i%7==0){
continue;
}
else{
putpixel(x,y,2);
}
}
}
getch();
closegraph();
return 0;
}

5. 2-D Translation.

Program:

#include<stdio.h>
#include<graphics.h>
#include<stdlib.h>
void main()
{
int gm,gd=DETECT,x1,x2,x3,y1,y2,y3,nx1,nx2,nx3,ny1,ny2,ny3,xt,yt;
printf("\t program for basic transaction");
printf("\n\t Enter the Points of Triangle");
scanf("%d%d%d%d%d%d",&x1,&x2,&x3,&y1,&y2,&y3);
printf("\n Enter the translation Factor");
scanf("%d%d",&xt,&yt);
initgraph(&gd,&gm,"");
line(x1,y1,x2,y2);
line(x2,y2,x3,y3);
line(x3,y3,x1,y1);
nx1=x1+xt;
nx2=x2+xt;
nx3=x3+xt;
ny1=y1+yt;
ny2=y2+yt;
ny3=y3+yt;
line(nx1,ny1,nx2,ny2);
line(nx2,ny2,nx3,ny3);
line(nx3,ny3,nx1,ny1);
delay(50000);
closegraph();
}

6. 2-D Rotation.

Program:

#include<stdio.h>
#include<graphics.h>
#include<stdlib.h>
void main()
{
int gm,gd=DETECT,x1,x2,x3,y1,y2,y3,nx1,nx2,nx3,ny1,ny2,ny3,xt,yt,c,r;
float t;
printf("\t program for basic transaction");
printf("\n\t Enter the Points of Triangle");
scanf("%d%d%d%d%d%d",&x1,&x2,&x3,&y1,&y2,&y3);
printf("\n Enter the angle of rotation");
scanf("%d",&r);
initgraph(&gd,&gm,"");
line(x1,y1,x2,y2);
line(x2,y2,x3,y3);
line(x3,y3,x1,y1);
t=3.14*r/180;
nx1=abs(x1*cos(t)-y1*sin(t));
nx2=abs(x2*cos(t)-y2*sin(t));
nx3=abs(x3*cos(t)-y3*sin(t));
ny1=abs(x1*sin(t)+y1*cos(t));
ny2=abs(x2*sin(t)+y2*cos(t));
ny3=abs(x3*sin(t)+y3*cos(t));
line(nx1,ny1,nx2,ny2);
line(nx2,ny2,nx3,ny3);
line(nx3,ny3,nx1,ny1);
delay(50000);
closegraph();
}

7. 2-D Scaling.

Program:

#include<stdio.h>
#include<graphics.h>
#include<stdlib.h>
void main()
{
int gm,gd=DETECT,x1,x2,x3,y1,y2,y3,nx1,nx2,nx3,ny1,ny2,ny3,xt,yt,c,r,sx,sy;
float t;
printf("\t program for basic transaction");
printf("\n\t Enter the Points of Triangle");
scanf("%d%d%d%d%d%d",&x1,&x2,&x3,&y1,&y2,&y3);
printf("\n Enter the scaling Factor");
scanf("%d%d",&xt,&yt);
initgraph(&gd,&gm,"");
line(x1,y1,x2,y2);
line(x2,y2,x3,y3);
line(x3,y3,x1,y1);
nx1=x1*xt;
nx2=x2*xt;
nx3=x3*xt;
ny1=y1*yt;
ny2=y2*yt;
ny3=y3*yt;
line(nx1,ny1,nx2,ny2);
line(nx2,ny2,nx3,ny3);
line(nx3,ny3,nx1,ny1);
delay(50000);
closegraph();
}

8.Flood fill.

Program:

#include<stdio.h>
#include<graphics.h>
//#include<dos.h>
void floodFill(int x, int y,int oldcolor,int newcolor)
{
if (getpixel(x, y)==oldcolor)
{
putpixel(x,y,newcolor);
floodFill(x+1,y,oldcolor,newcolor);
floodFill(x,y+1,oldcolor,newcolor);
floodFill(x-1,y,oldcolor,newcolor);
floodFill(x,y-1, oldcolor,newcolor);
}
}
int main()
{
int gm,gd=DETECT,radius;
int x,y;
printf("Enter x and y positions for circle\n");
scanf("%d%d",&x,&y);
printf("Enter radius of circle\n");
scanf("%d",&radius);
initgraph (&gd,&gm,"c:\\turboc3\\bgi");
circle(x,y,radius);
floodFill(x,y,0,15);
delay(5000);
closegraph();
return 0;
}

9. Boundary fill.

Program: 

#include<stdio.h>
#include<graphics.h>
void boundaryfill(int x,int y,int fcolor,int bcolor)
{
if(getpixel(x,y)!=bcolor && getpixel(x,y)!=fcolor)
{
putpixel(x,y,fcolor);
boundaryfill(x + 1,y,fcolor,bcolor);
boundaryfill(x,y + 1,fcolor,bcolor);
boundaryfill(x - 1,y,fcolor,bcolor);
boundaryfill(x,y - 1,fcolor,bcolor);
}
}
int main()
{
int gm,gd=DETECT,radius;
int x,y;
printf("Enter x and y positions for circle\n");
scanf("%d%d",&x,&y);
printf("Enter radius of circle\n");
scanf("%d",&radius);
initgraph(&gd,&gm,"");
circle(x,y,radius);
boundaryfill(x,y,4,15);
delay(5000);
closegraph();
return 0;
}

10. Character generation to print initials of your name.

Program: 

#include<stdio.h>
#include<graphics.h>
void main()
{
int gd=DETECT,gm,i,j;
int a[20][20]=
{
{1,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1},
{1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0},
{1,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0},
{1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0},
{1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0},
{1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0},
{1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0},
{1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,0},
{1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0},
{1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0},
};
initgraph(&gd,&gm,"");
for(i=0;i<19;i++)
{
for(j=0;j<19;j++)
{
if(a[i][j]==1)
putpixel(200+j,200+i,WHITE);
}
}
getch();
}

11. Bezier Curve.

Program: 

#include<stdio.h>
#include<stdlib.h>
#include<graphics.h>
#include<math.h>
void bezier(int x[4],int y[4])
{
int gd=DETECT,gm;
int i;
double p;
initgraph(&gd,&gm,"");
for(p=0.0;p<1.0;p+=0.0005)
{
double xt=pow (1-p,3) * x[0] + 3*p*pow (1-p,2)*x[1]+
3*pow (p,2)*(1-p)*x[2]+pow (p,3)*x[3];
double yt=pow (1-p,3)*y[0]+3*p*pow (1-p,2)*y[1]+
3*pow (p,2)*(1-p)*y[2]+pow (p,3)*y[3];
putpixel(xt,yt,WHITE);
}
for(i=0;i<4;i++)
putpixel(x[i],y[i],YELLOW);
getch();
closegraph();
return;
}
void main()
{
int x[4],y[4];
int i;
printf("Enter the x- and y- coordinates of the four control points: \n ");
for(i=0;i<4;i++)
scanf("%d%d",&x[i],&y[i]);
bezier(x,y);
}


*Extra CG codes*

Write a program to implement 2D transformations 
i) Translation ii) Rotation iii) Scaling iv) Shear

Program:

#include<stdio.h>
#include<graphics.h>
#include<math.h>
int x=330,y=250;
int a[4][2]={{50,50},{100,50},{100,100},{50,100}};
void draw(int x,int y)
{
setcolor(WHITE);
line(x,y-250,x,y+250);
line(x-330,y,x+330,y);
}
void stats(int x,int y)
{
line(x+a[0][0],y-a[0][1],x+a[1][0],y-a[1][1]);
line(x+a[1][0],y-a[1][1],x+a[2][0],y-a[2][1]);
line(x+a[2][0],y-a[2][1],x+a[3][0],y-a[3][1]);
line(x+a[3][0],y-a[3][1],x+a[0][0],y-a[0][1]);
}
void translate(int x,int y)
{
int tx,ty,xt,yt;
cleardevice();
printf("\nEnter translation factor (tx,ty): ");
scanf("%d%d",&tx,&ty);
cleardevice();
draw(x,y); setcolor(WHITE);
stats(x,y); xt=x+tx; yt=y+ty;
setcolor(GREEN);
stats(xt,yt); }
void rotate(int x,int y) {double d,x2r,y2r,x3r,y3r,x4r,y4r;
cleardevice();
printf("\nEnter Angle of Rotation: ");
scanf("%lf",&d);
cleardevice();
draw(x,y); setcolor(WHITE);
stats(x,y);
d=(d*3.14)/180;
x2r=a[0][0]+(((a[1][0]-a[0][0])*cos(d))-((a[1][1]-a[0][1])*sin(d)));
y2r=a[0][1]+(((a[1][0]-a[0][0])*sin(d))+((a[1][1]-a[0][1])*cos(d)));
x3r=a[0][0]+(((a[2][0]-a[0][0])*cos(d))-((a[2][1]-a[0][1])*sin(d)));
y3r=a[0][1]+(((a[2][0]-a[0][0])*sin(d))+((a[2][1]-a[0][1])*cos(d)));
x4r=a[0][0]+(((a[3][0]-a[0][0])*cos(d))-((a[3][1]-a[0][1])*sin(d)));
y4r=a[0][1]+(((a[3][0]-a[0][0])*sin(d))+((a[3][1]-a[0][1])*cos(d)));
setcolor(GREEN); line(x+a[0][0],y-a[0][1],x+x2r,y-y2r);
line(x+x2r,y-y2r,x+x3r,y-y3r);
line(x+x3r,y-y3r,x+x4r,y-y4r); line(x+x4r,y-y4r,x+a[0][0],y-a[0][1]); }
void scale(int x,int y) {
int sx,sy; cleardevice();
printf("\nEnter scaling factor (sx,sy): ");
scanf("%d%d",&sx,&sy);
cleardevice();
draw(x,y); setcolor(WHITE);
stats(x,y);
setcolor(GREEN);
line(x+a[0][0]*sx,y-a[0][1]*sy,x+a[1][0]*sx,y-a[1][1]*sy);
line(x+a[1][0]*sx,y-a[1][1]*sy,x+a[2][0]*sx,y-a[2][1]*sy);
line(x+a[2][0]*sx,y-a[2][1]*sy,x+a[3][0]*sx,y-a[3][1]*sy);
line(x+a[3][0]*sx,y-a[3][1]*sy,x+a[0][0]*sx,y-a[0][1]*sy);
}
void reflect(int x,int y) {
int x1,y1,ch;
printf("\n1.About X-axis\n2.About Y-axis:\nEnter choice: ");
scanf("%d",&ch);
cleardevice();
draw(x,y); setcolor(WHITE);
stats(x,y);
x1=-1;
y1=1; setcolor(GREEN);
if(ch==2) {
line(x+a[0][0]*x1,y-a[0][1]*y1,x+a[1][0]*x1,y-a[1][1]*y1);
line(x+a[1][0]*x1,y-a[1][1]*y1,x+a[2][0]*x1,y-a[2][1]*y1);
line(x+a[2][0]*x1,y-a[2][1]*y1,x+a[3][0]*x1,y-a[3][1]*y1);
line(x+a[3][0]*x1,y-a[3][1]*y1,x+a[0][0]*x1,y-a[0][1]*y1); }
else {
line(x-a[0][0]*x1,y+a[0][1]*y1,x-a[1][0]*x1,y+a[1][1]*y1);
line(x-a[1][0]*x1,y+a[1][1]*y1,x-a[2][0]*x1,y+a[2][1]*y1);
line(x-a[2][0]*x1,y+a[2][1]*y1,x-a[3][0]*x1,y+a[3][1]*y1);
line(x-a[3][0]*x1,y+a[3][1]*y1,x-a[0][0]*x1,y+a[0][1]*y1); }}
void shear(int x,int y) {
int shr,sh1,sh2,shear;
cleardevice();
printf("\n1: Shear w.r.t X-axis\n2: Shear w.r.t Y-axis");
printf("\nEnter choice: ");
scanf("%d",&shear);
printf("\nEnter shear value: ");
scanf("%d",&shr);
cleardevice();
draw(x,y); setcolor(WHITE);
stats(x,y);
setcolor(GREEN);
switch(shear) {
case 1: {
sh1=shr*a[2][1];
sh2=shr*a[3][1];
line(x+a[0][0],y-a[0][1],x+a[1][0],y-a[1][1]);
line(x+a[1][0],y-a[1][1],x+a[2][0]+sh1,y-a[2][1]);
line(x+a[2][0]+sh1,y-a[2][1],x+a[3][0]+sh2,y-a[3][1]);
line(x+a[3][0]+sh2,y-a[3][1],x+a[0][0],y-a[0][1]);
break;
}
case 2:
{
sh1=shr*a[1][0];
sh2=shr*a[2][0];
line(x+a[0][0],y-a[0][1],x+a[1][0],y-a[1][1]-sh2);
line(x+a[1][0],y-a[1][1]-sh2,x+a[2][0],y-a[2][1]-sh2);
line(x+a[2][0],y-a[2][1]-sh2,x+a[3][0],y-a[3][1]);
line(x+a[3][0],y-a[3][1],x+a[0][0],y-a[0][1]);
break;
}
}
}
void main()
{
int ch;
int gd=DETECT,gm;
initgraph(&gd,&gm,"C:\\turboc3\\bgi");
cleardevice();
printf("\n1: TRANSLATION \n2: ROTATION \n3: SCALING \n4: REFLECTION \n5: SHEAR");
printf("\nEnter choice: ");
scanf("%d",&ch);
switch(ch)
{
case 1: translate(x,y);
break;
case 2: rotate(x,y);
break;
case 3: scale(x,y);
break;
case 4: reflect(x,y);
break;
case 5: shear(x,y);
break;
default:printf("Wrong choice");
break;
}
delay(5000);
closegraph();
getch();
restorecrtmode();
}

*Write a program to implement the Mid-Point circle-generating algorithm.*

Program:

#include<stdlib.h>
#include<graphics.h>
#include<stdio.h>
void pixel (int xc, int yc, int x, int y);
void main() {
int gd=DETECT, gm, xc, yc,r,x,y,Pk;
printf("* Mid-Point Subdivision algorithm of circle *\n");
printf("Enter the value of Xc\t");
scanf("%d", &xc);
printf("Enter the value of Yc \t");
scanf("%d", &yc);
printf("Enter the Radius of circle\t");
scanf("%d", &r);
initgraph (&gd, &gm," ");
x = 0;
y=r;
Pk = 1 - r;
pixel (xc,yc,x,y);
while
(x<y) { if(Pk <
0) {
x = x + 1;
Pk=Pk+(2*x)+1;
} else { 
x=x+1;
y=y-1;
Pk=Pk+(2*x)-(2*y)+1;
}
pixel (xc,yc,x,y);
}
getch();
closegraph();
}
void pixel (int xc, int yc,int x, int y)
{
putpixel(xc+x,yc+y,7);
putpixel(xc+y,yc+x,7);
putpixel(xc-y,yc+x,7);
putpixel(xc-x,yc+y,7);
putpixel(xc-x,yc-y,7);
putpixel(xc-y,yc-x,7);
putpixel(xc+y,yc-x,7);
putpixel(xc+x,yc-y,7);
} 

*Write a program to implement the Line clipping algorithm Cohen Sutherland / Liang Barsky*

Program:

#include<stdio.h>
#include<graphics.h>
#include<stdlib.h>
int main(void)
{
int x1,gm,gd=DETECT,y1,x2,y2,xwmin,ywmin,xwmax,ywmax,dx,dy,k;
float p[4],q[4],r[4],min,max,u1,u2,xi,xii,yi,yii;
printf("Enter the starting coordinates of the line segment: ");
scanf("%d%d",&x1,&y1);
printf("Enter the ending coordinates of the line segment: ");
scanf("%d%d",&x2,&y2);
printf("Enter the lower left corner of window boundary: ");
scanf("%d%d",&xwmin,&ywmin);
printf("Enter the upper right corner of the window boundary: ");
scanf("%d%d",&xwmax,&ywmax);
initgraph(&gd,&gm,"");
dx=x2-x1;
dy=y2-y1;
line(x1,y1,x2,y2);
rectangle(xwmin,ywmin,xwmax,ywmax);
p[0]=-dx;
q[0]=x1-xwmin;
p[1]=dx;
q[1]=xwmax-x1;
p[2]=-dy;
q[2]=y1-ywmin;
p[3]=dy;
q[3]=ywmax-y1;
for(k=0;k<4;k++)
{
if(p[k]==0&&q[k]<0)
{
printf("Line is outside the parallel clipping boundary, it is not a clipping candidate\n");
getch();
exit(0);
}
}
for(k = 0; k < 4; k++)
{
r[k] = q[k] / p[k];
printf("\nr[%d]=%f", k, r[k]);
}
max = 0;
min = 1;
for (k = 0; k < 4; k++)
{
if (p[k] < 0)
{
if (r[k] > max)
max = r[k];
}
else
{
if (r[k] < min)
min = r[k];
}
}
u1 = max;
u2 = min;
printf("\n u1=%f", u1);
printf("\n u2=%f", u2);
if (u1 > u2)
{
printf("\n Line is completely outside the window boundary");
getch();
closegraph();
exit(0);
}
xi = x1 + (u1 * dx);
yi = y1 + (u1 * dy);
xii = x1 + (u2 * dx);
yii = y1 + (u2 * dy);
rectangle(xwmin, ywmin, xwmax, ywmax);
setcolor(5);
line(xi, yi, xii, yii);
getch();
closegraph();
return 0;
}
